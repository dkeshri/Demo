{"version":3,"sources":["../node_modules/prismjs/plugins/line-numbers/prism-line-numbers.js","../node_modules/prismjs/plugins/line-highlight/prism-line-highlight.js","views/ui-elements/syntax-highlighter/BasicUsage.js","views/ui-elements/syntax-highlighter/Examples.js","views/ui-elements/syntax-highlighter/LineNumbers.js","views/ui-elements/syntax-highlighter/LineHightlight.js","views/ui-elements/syntax-highlighter/SyntaxHighlighter.js"],"names":["self","Prism","document","NEW_LINE_EXP","_resizeElement","element","whiteSpace","getStyles","codeElement","querySelector","lineNumbersWrapper","lineNumberSizer","codeLines","textContent","split","createElement","className","appendChild","style","display","forEach","line","lineNumber","lineSize","getBoundingClientRect","height","children","window","getComputedStyle","currentStyle","addEventListener","Array","prototype","call","querySelectorAll","hooks","add","env","code","pre","parentNode","test","nodeName","addLineNumbers","lineNumbersRegex","replace","match","linesNum","length","lines","join","setAttribute","innerHTML","hasAttribute","counterReset","parseInt","getAttribute","run","plugins","lineNumbers","getLine","number","tagName","classList","contains","lineNumberRows","lineNumberStart","lineNumberEnd","lineIndex","isLineHeightRounded","res","d","fontSize","lineHeight","padding","border","body","offsetHeight","removeChild","fakeTimer","num","$$","slice","completeHook","clearTimeout","hasLineNumbers","isLineNumbersLoaded","hasClass","highlightLines","mutateDom","setTimeout","applyHash","actions","push","callFunction","expr","con","indexOf","func","classes","ranges","offset","parseFloat","parentElement","mutateActions","currentRange","range","start","end","startNode","endNode","top","offsetTop","hash","location","getElementById","id","lastIndexOf","scrollIntoView","BasicUsage","Card","CardHeader","CardTitle","CardBody","href","target","rel","React","Component","Examples","LineNumber","LineHighlight","data-line","SyntaxHighlighter","highlightAll","Fragment","breadCrumbTitle","breadCrumbParent","breadCrumbActive","Row","Col","sm","LineNumbers"],"mappings":"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","file":"static/js/84.2c5f6a4f.chunk.js","sourcesContent":["(function () {\n\n\tif (typeof self === 'undefined' || !self.Prism || !self.document) {\n\t\treturn;\n\t}\n\n\t/**\n\t * Plugin name which is used as a class name for <pre> which is activating the plugin\n\t * @type {String}\n\t */\n\tvar PLUGIN_NAME = 'line-numbers';\n\n\t/**\n\t * Regular expression used for determining line breaks\n\t * @type {RegExp}\n\t */\n\tvar NEW_LINE_EXP = /\\n(?!$)/g;\n\n\t/**\n\t * Resizes line numbers spans according to height of line of code\n\t * @param {Element} element <pre> element\n\t */\n\tvar _resizeElement = function (element) {\n\t\tvar codeStyles = getStyles(element);\n\t\tvar whiteSpace = codeStyles['white-space'];\n\n\t\tif (whiteSpace === 'pre-wrap' || whiteSpace === 'pre-line') {\n\t\t\tvar codeElement = element.querySelector('code');\n\t\t\tvar lineNumbersWrapper = element.querySelector('.line-numbers-rows');\n\t\t\tvar lineNumberSizer = element.querySelector('.line-numbers-sizer');\n\t\t\tvar codeLines = codeElement.textContent.split(NEW_LINE_EXP);\n\n\t\t\tif (!lineNumberSizer) {\n\t\t\t\tlineNumberSizer = document.createElement('span');\n\t\t\t\tlineNumberSizer.className = 'line-numbers-sizer';\n\n\t\t\t\tcodeElement.appendChild(lineNumberSizer);\n\t\t\t}\n\n\t\t\tlineNumberSizer.style.display = 'block';\n\n\t\t\tcodeLines.forEach(function (line, lineNumber) {\n\t\t\t\tlineNumberSizer.textContent = line || '\\n';\n\t\t\t\tvar lineSize = lineNumberSizer.getBoundingClientRect().height;\n\t\t\t\tlineNumbersWrapper.children[lineNumber].style.height = lineSize + 'px';\n\t\t\t});\n\n\t\t\tlineNumberSizer.textContent = '';\n\t\t\tlineNumberSizer.style.display = 'none';\n\t\t}\n\t};\n\n\t/**\n\t * Returns style declarations for the element\n\t * @param {Element} element\n\t */\n\tvar getStyles = function (element) {\n\t\tif (!element) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn window.getComputedStyle ? getComputedStyle(element) : (element.currentStyle || null);\n\t};\n\n\twindow.addEventListener('resize', function () {\n\t\tArray.prototype.forEach.call(document.querySelectorAll('pre.' + PLUGIN_NAME), _resizeElement);\n\t});\n\n\tPrism.hooks.add('complete', function (env) {\n\t\tif (!env.code) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar code = env.element;\n\t\tvar pre = code.parentNode;\n\n\t\t// works only for <code> wrapped inside <pre> (not inline)\n\t\tif (!pre || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Abort if line numbers already exists\n\t\tif (code.querySelector('.line-numbers-rows')) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar addLineNumbers = false;\n\t\tvar lineNumbersRegex = /(?:^|\\s)line-numbers(?:\\s|$)/;\n\n\t\tfor (var element = code; element; element = element.parentNode) {\n\t\t\tif (lineNumbersRegex.test(element.className)) {\n\t\t\t\taddLineNumbers = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// only add line numbers if <code> or one of its ancestors has the `line-numbers` class\n\t\tif (!addLineNumbers) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove the class 'line-numbers' from the <code>\n\t\tcode.className = code.className.replace(lineNumbersRegex, ' ');\n\t\t// Add the class 'line-numbers' to the <pre>\n\t\tif (!lineNumbersRegex.test(pre.className)) {\n\t\t\tpre.className += ' line-numbers';\n\t\t}\n\n\t\tvar match = env.code.match(NEW_LINE_EXP);\n\t\tvar linesNum = match ? match.length + 1 : 1;\n\t\tvar lineNumbersWrapper;\n\n\t\tvar lines = new Array(linesNum + 1).join('<span></span>');\n\n\t\tlineNumbersWrapper = document.createElement('span');\n\t\tlineNumbersWrapper.setAttribute('aria-hidden', 'true');\n\t\tlineNumbersWrapper.className = 'line-numbers-rows';\n\t\tlineNumbersWrapper.innerHTML = lines;\n\n\t\tif (pre.hasAttribute('data-start')) {\n\t\t\tpre.style.counterReset = 'linenumber ' + (parseInt(pre.getAttribute('data-start'), 10) - 1);\n\t\t}\n\n\t\tenv.element.appendChild(lineNumbersWrapper);\n\n\t\t_resizeElement(pre);\n\n\t\tPrism.hooks.run('line-numbers', env);\n\t});\n\n\tPrism.hooks.add('line-numbers', function (env) {\n\t\tenv.plugins = env.plugins || {};\n\t\tenv.plugins.lineNumbers = true;\n\t});\n\n\t/**\n\t * Global exports\n\t */\n\tPrism.plugins.lineNumbers = {\n\t\t/**\n\t\t * Get node for provided line number\n\t\t * @param {Element} element pre element\n\t\t * @param {Number} number line number\n\t\t * @return {Element|undefined}\n\t\t */\n\t\tgetLine: function (element, number) {\n\t\t\tif (element.tagName !== 'PRE' || !element.classList.contains(PLUGIN_NAME)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar lineNumberRows = element.querySelector('.line-numbers-rows');\n\t\t\tvar lineNumberStart = parseInt(element.getAttribute('data-start'), 10) || 1;\n\t\t\tvar lineNumberEnd = lineNumberStart + (lineNumberRows.children.length - 1);\n\n\t\t\tif (number < lineNumberStart) {\n\t\t\t\tnumber = lineNumberStart;\n\t\t\t}\n\t\t\tif (number > lineNumberEnd) {\n\t\t\t\tnumber = lineNumberEnd;\n\t\t\t}\n\n\t\t\tvar lineIndex = number - lineNumberStart;\n\n\t\t\treturn lineNumberRows.children[lineIndex];\n\t\t}\n\t};\n\n}());\n","(function () {\n\n\tif (typeof self === 'undefined' || !self.Prism || !self.document || !document.querySelector) {\n\t\treturn;\n\t}\n\n\tfunction $$(expr, con) {\n\t\treturn Array.prototype.slice.call((con || document).querySelectorAll(expr));\n\t}\n\n\tfunction hasClass(element, className) {\n\t\tclassName = \" \" + className + \" \";\n\t\treturn (\" \" + element.className + \" \").replace(/[\\n\\t]/g, \" \").indexOf(className) > -1\n\t}\n\n\tfunction callFunction(func) {\n\t\tfunc();\n\t}\n\n\t// Some browsers round the line-height, others don't.\n\t// We need to test for it to position the elements properly.\n\tvar isLineHeightRounded = (function () {\n\t\tvar res;\n\t\treturn function () {\n\t\t\tif (typeof res === 'undefined') {\n\t\t\t\tvar d = document.createElement('div');\n\t\t\t\td.style.fontSize = '13px';\n\t\t\t\td.style.lineHeight = '1.5';\n\t\t\t\td.style.padding = 0;\n\t\t\t\td.style.border = 0;\n\t\t\t\td.innerHTML = '&nbsp;<br />&nbsp;';\n\t\t\t\tdocument.body.appendChild(d);\n\t\t\t\t// Browsers that round the line-height should have offsetHeight === 38\n\t\t\t\t// The others should have 39.\n\t\t\t\tres = d.offsetHeight === 38;\n\t\t\t\tdocument.body.removeChild(d);\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n\t}());\n\n\t/**\n\t * Highlights the lines of the given pre.\n\t *\n\t * This function is split into a DOM measuring and mutate phase to improve performance.\n\t * The returned function mutates the DOM when called.\n\t *\n\t * @param {HTMLElement} pre\n\t * @param {string} [lines]\n\t * @param {string} [classes='']\n\t * @returns {() => void}\n\t */\n\tfunction highlightLines(pre, lines, classes) {\n\t\tlines = typeof lines === 'string' ? lines : pre.getAttribute('data-line');\n\n\t\tvar ranges = lines.replace(/\\s+/g, '').split(',');\n\t\tvar offset = +pre.getAttribute('data-line-offset') || 0;\n\n\t\tvar parseMethod = isLineHeightRounded() ? parseInt : parseFloat;\n\t\tvar lineHeight = parseMethod(getComputedStyle(pre).lineHeight);\n\t\tvar hasLineNumbers = hasClass(pre, 'line-numbers');\n\t\tvar parentElement = hasLineNumbers ? pre : pre.querySelector('code') || pre;\n\t\tvar mutateActions = /** @type {(() => void)[]} */ ([]);\n\n\t\tranges.forEach(function (currentRange) {\n\t\t\tvar range = currentRange.split('-');\n\n\t\t\tvar start = +range[0];\n\t\t\tvar end = +range[1] || start;\n\n\t\t\tvar line = pre.querySelector('.line-highlight[data-range=\"' + currentRange + '\"]') || document.createElement('div');\n\n\t\t\tmutateActions.push(function () {\n\t\t\t\tline.setAttribute('aria-hidden', 'true');\n\t\t\t\tline.setAttribute('data-range', currentRange);\n\t\t\t\tline.className = (classes || '') + ' line-highlight';\n\t\t\t});\n\n\t\t\t// if the line-numbers plugin is enabled, then there is no reason for this plugin to display the line numbers\n\t\t\tif (hasLineNumbers && Prism.plugins.lineNumbers) {\n\t\t\t\tvar startNode = Prism.plugins.lineNumbers.getLine(pre, start);\n\t\t\t\tvar endNode = Prism.plugins.lineNumbers.getLine(pre, end);\n\n\t\t\t\tif (startNode) {\n\t\t\t\t\tvar top = startNode.offsetTop + 'px';\n\t\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\t\tline.style.top = top;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif (endNode) {\n\t\t\t\t\tvar height = (endNode.offsetTop - startNode.offsetTop) + endNode.offsetHeight + 'px';\n\t\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\t\tline.style.height = height;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmutateActions.push(function () {\n\t\t\t\t\tline.setAttribute('data-start', start);\n\n\t\t\t\t\tif (end > start) {\n\t\t\t\t\t\tline.setAttribute('data-end', end);\n\t\t\t\t\t}\n\n\t\t\t\t\tline.style.top = (start - offset - 1) * lineHeight + 'px';\n\n\t\t\t\t\tline.textContent = new Array(end - start + 2).join(' \\n');\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tmutateActions.push(function () {\n\t\t\t\t// allow this to play nicely with the line-numbers plugin\n\t\t\t\t// need to attack to pre as when line-numbers is enabled, the code tag is relatively which screws up the positioning\n\t\t\t\tparentElement.appendChild(line);\n\t\t\t});\n\t\t});\n\n\t\treturn function () {\n\t\t\tmutateActions.forEach(callFunction);\n\t\t};\n\t}\n\n\tfunction applyHash() {\n\t\tvar hash = location.hash.slice(1);\n\n\t\t// Remove pre-existing temporary lines\n\t\t$$('.temporary.line-highlight').forEach(function (line) {\n\t\t\tline.parentNode.removeChild(line);\n\t\t});\n\n\t\tvar range = (hash.match(/\\.([\\d,-]+)$/) || [, ''])[1];\n\n\t\tif (!range || document.getElementById(hash)) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar id = hash.slice(0, hash.lastIndexOf('.')),\n\t\t\tpre = document.getElementById(id);\n\n\t\tif (!pre) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!pre.hasAttribute('data-line')) {\n\t\t\tpre.setAttribute('data-line', '');\n\t\t}\n\n\t\tvar mutateDom = highlightLines(pre, range, 'temporary ');\n\t\tmutateDom();\n\n\t\tdocument.querySelector('.temporary.line-highlight').scrollIntoView();\n\t}\n\n\tvar fakeTimer = 0; // Hack to limit the number of times applyHash() runs\n\n\tPrism.hooks.add('before-sanity-check', function (env) {\n\t\tvar pre = env.element.parentNode;\n\t\tvar lines = pre && pre.getAttribute('data-line');\n\n\t\tif (!pre || !lines || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\t/*\n\t\t * Cleanup for other plugins (e.g. autoloader).\n\t\t *\n\t\t * Sometimes <code> blocks are highlighted multiple times. It is necessary\n\t\t * to cleanup any left-over tags, because the whitespace inside of the <div>\n\t\t * tags change the content of the <code> tag.\n\t\t */\n\t\tvar num = 0;\n\t\t$$('.line-highlight', pre).forEach(function (line) {\n\t\t\tnum += line.textContent.length;\n\t\t\tline.parentNode.removeChild(line);\n\t\t});\n\t\t// Remove extra whitespace\n\t\tif (num && /^( \\n)+$/.test(env.code.slice(-num))) {\n\t\t\tenv.code = env.code.slice(0, -num);\n\t\t}\n\t});\n\n\tPrism.hooks.add('complete', function completeHook(env) {\n\t\tvar pre = env.element.parentNode;\n\t\tvar lines = pre && pre.getAttribute('data-line');\n\n\t\tif (!pre || !lines || !/pre/i.test(pre.nodeName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearTimeout(fakeTimer);\n\n\t\tvar hasLineNumbers = Prism.plugins.lineNumbers;\n\t\tvar isLineNumbersLoaded = env.plugins && env.plugins.lineNumbers;\n\n\t\tif (hasClass(pre, 'line-numbers') && hasLineNumbers && !isLineNumbersLoaded) {\n\t\t\tPrism.hooks.add('line-numbers', completeHook);\n\t\t} else {\n\t\t\tvar mutateDom = highlightLines(pre, lines);\n\t\t\tmutateDom();\n\t\t\tfakeTimer = setTimeout(applyHash, 1);\n\t\t}\n\t});\n\n\twindow.addEventListener('hashchange', applyHash);\n\twindow.addEventListener('resize', function () {\n\t\tvar actions = [];\n\t\t$$('pre[data-line]').forEach(function (pre) {\n\t\t\tactions.push(highlightLines(pre));\n\t\t});\n\t\tactions.forEach(callFunction);\n\t});\n\n})();\n","import React from \"react\"\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\n// eslint-disable-next-line\nimport prism from \"prismjs\"\nclass BasicUsage extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Basic Usage</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <p>First You will need to import prism.</p>\n          <p>\n            Prism does its best to encourage good authoring practices.\n            Therefore, it only works with\n            <code>&ltcode&gt</code>elements, since marking up code without a{\" \"}\n            <code>&ltcode&gt </code>element is semantically invalid.\n            <a\n              href=\"http://www.w3.org/TR/html5/text-level-semantics.html#the-code-element\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              According to the HTML5 spec\n            </a>\n            , the recommended way to define a code language is a{\" \"}\n            <code>language-xxxx</code>class, which is what Prism uses. To make\n            things easier however, Prism assumes that this language definition\n            is inherited. Therefore, if multiple <code>&ltcode&gt </code>\n            elements have the same language, you can add the\n            <code>language-xxxx</code>class on one of their common ancestors.\n            This way, you can also define a document-wide default language, by\n            adding a <code>language-xxxx</code>class on the\n            <code>&ltbody&gt </code>or <code>&lthtml&gt</code>element.{\" \"}\n          </p>\n          <p>\n            If you want to opt-out of highlighting for a{\" \"}\n            <code>&ltcode&gt</code>\n            element that is a descendant of an element with a declared code\n            language, you can add the class <code>language-none</code>to it (or\n            any non-existing language, really).\n          </p>\n          <p>\n            The{\" \"}\n            <a\n              href=\"https://www.w3.org/TR/html5/grouping-content.html#the-pre-element\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              recommended way to mark up a code block\n            </a>\n            (both for semantics and for Prism) is a <code>&ltpre&gt</code>\n            element with a <code>&ltcode&gt</code>element inside, like so:\n          </p>\n          <p>code:</p>\n          <pre>\n            <code className=\"language-markup\">\n              {`\n<pre>\n  <code class=\"language-css\">\n    p {\n        color: red\n      }\n  </code>\n</pre>\n  `}\n            </code>\n          </pre>\n          <p className=\"my-1\">Output</p>\n          <pre>\n            <code className=\"language-css\">\n              {`\np {\n  color: red\n}\n                `}\n            </code>\n          </pre>\n          <p className=\"mt-1\">\n            If you use that pattern, the <code>&ltpre&gt</code>will\n            automatically get the <code>language-xxxx</code>class (if it doesn't\n            already have it) and will be styled as a code block.\n          </p>\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default BasicUsage\n","import React from 'react'\nimport { Card, CardHeader, CardTitle, CardBody } from 'reactstrap'\n// eslint-disable-next-line\nimport prism from \"prismjs\"\n\n\n\nclass Examples extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Examples</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <h5 className=\"font-weight-600\">HTML Markup</h5>\n          <p>Use the following code to use HTML syntax highlighter.</p>\n          <p>Usage:</p>\n          <pre>\n            <code className=\"language-markup\">\n              {`\n<pre>\n  <code class=\"language-html\">\n    HTML CODE ...\n  </code>\n</pre>\n            `}\n            </code>\n          </pre>\n          <p className=\"my-1\">Output:</p>\n          <pre>\n            <code className=\"language-markup\">\n              {`\n<Media>\n  <Media left href=\"#\">\n    <Media object data-src=\"holder.js/64x64\" alt=\"Generic placeholder image\" />\n  </Media>\n  <Media body>\n    <Media heading>\n      Media heading\n    </Media>\n    Cras sit amet nibh libero, in gravida nulla. Nulla vel metus scelerisque ante sollicitudin commodo.\n  </Media>\n</Media>\n\n      `}\n            </code>\n          </pre>\n\n          <h5 className=\"font-weight-600 mt-2\">CSS Markup</h5>\n          <p>Use the following code to use CSS syntax highlighter.</p>\n          <p>Usage:</p>\n          <pre>\n            <code className=\"language-markup\">\n              {`\n<pre>\n  <code class=\"language-css\">\n    CSS CODE ...\n  </code>\n</pre>\n            `}\n            </code>\n          </pre>\n          <p className=\"my-1\">Output:</p>\n          <pre>\n            <code className=\"language-css\">\n              {`\na:active {\n  outline: 0\n}\n\na:hover {\n  outline: 0\n}\n\nabbr[title] {\n  border-bottom: 1px dotted\n}\n\nb, strong {\n  font-weight: bold\n}\n\ndfn {\n  font-style: italic\n}\n\nh1 {\n  font-size: 2em\n  margin: 0.67em 0\n}\n          `}\n            </code>\n          </pre>\n\n          <h5 className=\"font-weight-600 mt-2\">JS Markup</h5>\n          <p>Use the following code to use JS syntax highlighter.</p>\n          <p>Usage:</p>\n          <pre>\n            <code className=\"language-markup\">\n              {`\n<pre>\n  <code class=\"language-js\">\n    JS CODE ...\n  </code>\n</pre>\n            `}\n            </code>\n          </pre>\n          <p className=\"my-1\">Output:</p>\n          <pre>\n            <code className=\"language-javascript\">\n              {`\ncomponentDidMount() {\n  this.setState({\n    item : true\n  })\n}\n              `}\n            </code>\n          </pre>\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default Examples\n","import React from \"react\"\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\n/*eslint-disable */\n\nimport prism from \"prismjs\"\nimport LineNumbers from \"prismjs/plugins/line-numbers/prism-line-numbers\"\nimport \"prismjs/plugins/line-numbers/prism-line-numbers.css\"\n\n/*eslint-enable */\n\nclass LineNumber extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Line Numbers</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <p>Line number at the beginning of code lines.</p>\n          <p>\n            Obviously, this is supposed to work only for code blocks (\n            <code>&ltpre&gt &ltcode&gt</code>) and not for inline code. Add\n            class line-numbers to your desired <code>&ltpre&gt</code> and\n            line-numbers plugin will take care.\n          </p>\n          <p>\n            Optional: You can specify the data-start (Number) attribute on the{\" \"}\n            <code>&ltpre&gt</code> element. It will shift the line counter.\n          </p>\n\n          <p>usage:</p>\n          <pre>\n            <code className=\"language-markup\">\n              {`\n<pre class=\"line-numbers\">\n  <code class=\"language-javascript\">\n   Code here...\n  </code>\n</pre>\n    `}\n            </code>\n          </pre>\n          <p className=\"my-1\">Output:</p>\n          <pre className=\"line-numbers\">\n            <code className=\"language-javascript\">\n              {` componentDidMount = () => {\n    if (typeof self==='undefined' || !self.Prism || !self.document) {\n      return\n    }\n  }`}\n            </code>\n          </pre>\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default LineNumber\n","import React from \"react\"\nimport { Card, CardHeader, CardTitle, CardBody } from \"reactstrap\"\n/*eslint-disable */\nimport prism from \"prismjs\"\nimport LineHighlighter from \"prismjs/plugins/line-highlight/prism-line-highlight\"\nimport \"prismjs/plugins/line-highlight/prism-line-highlight.css\"\n/*eslint-enable */\n\nclass LineHighlight extends React.Component {\n  render() {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Line Highlight</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <p>Highlights specific lines and/or line ranges.</p>\n          <p>\n            You specify the lines to be highlighted through the{\" \"}\n            <em>data-line</em> attribute on the\n            <code>&ltpre&gt </code> element, in the following simple format:\n          </p>\n          <ul>\n            <li>A single number refers to the line with that number</li>\n            <li>\n              Ranges are denoted by two numbers, separated with a hyphen (-)\n            </li>\n            <li>Multiple line numbers or ranges are separated by commas.</li>\n            <li>Whitespace is allowed anywhere and will be stripped off.</li>\n          </ul>\n          <p>Usage:</p>\n          <pre>\n            <code className=\"language-markup\">{`\n<pre data-line=\"2, 4, 8-10\">\n  <code class=\"language-css\">\n    Your Code\n  </code>\n</pre>\n            `}</code>\n          </pre>\n          <p className=\"my-1\">Output:</p>\n          <pre data-line=\"2, 4, 8-10\">\n            <code className=\"language-css\">\n              {`\npre.line-numbers {\n  position: relative\n  padding-left: 3.8em\n  counter-reset: linenumber\n}\n\npre.line-numbers > code {\n  position: relative\n}\n  `}\n            </code>\n          </pre>\n        </CardBody>\n      </Card>\n    )\n  }\n}\nexport default LineHighlight\n","import React from \"react\"\nimport { Row, Col } from \"reactstrap\"\nimport Breadcrumbs from \"../../../components/@vuexy/breadCrumbs/BreadCrumb\"\nimport BasicUsage from \"./BasicUsage\"\nimport Examples from \"./Examples\"\nimport LineNumbers from \"./LineNumbers\"\nimport LineHighlight from \"./LineHightlight\"\nimport Prism from \"prismjs\"\nclass SyntaxHighlighter extends React.Component {\n  componentDidMount() {\n    Prism.highlightAll()\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <Breadcrumbs\n          breadCrumbTitle=\"Syntax Highlighter\"\n          breadCrumbParent=\"Content\"\n          breadCrumbActive=\"Syntax Highlighter\"\n        />\n        <Row>\n          <Col sm=\"12\">\n            <BasicUsage />\n          </Col>\n          <Col sm=\"12\">\n            <Examples />\n          </Col>\n          <Col sm=\"12\">\n            <LineNumbers />\n          </Col>\n          <Col sm=\"12\">\n            <LineHighlight />\n          </Col>\n        </Row>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default SyntaxHighlighter\n"],"sourceRoot":""}